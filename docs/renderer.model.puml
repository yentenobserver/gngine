@startuml



abstract class PlaygroundView {  }


abstract class Renderer {
  view: PlaygroundView|undefined;
  renderablesFactory: RenderablesFactory|undefined;
  {method} setView(view: PlaygroundView):void
  {method} setRenderablesFactory(factory: RenderablesFactory):void
}

abstract class HudRenderer {
  components: HudComponent[];
  {method} addComponent(component:HudComponent):void;
  {method} repositionComponents():void;
}

abstract class HudRendererThreeJs {}

abstract class MapRenderer {
  {field} width: number;
  {field} height: number;
  {field} indicatorForTile: MapIndicator|undefined
  

  {method} initialize():Promise<void>;
  {method} remove(tile: TileBase):void;
  {method} replace(tile: TileBase, direction:string):void;
  {method} put(tile: TileBase, direction:string):void;
  {method} onTileChanged(tile: TileBase, direction: string):void;
  
  {method} rotate(rotation: number):void;
  {method} goToTile(tile: TileBase, object:THREE.Object3D):void;      
  {method} zoom(level: number):void;

  {method} highlightTiles(tiles: TileBase[]):void;
}

abstract class MapRendererThreeJs {
  tileSize: number;
  mapHolderObject: THREE.Object3D;
  tileFactory: RenderableThreeJSObject3DFactory;
  HELPERS:MapQuadRendererThreeJsHelpers;

  {method} _dispose(object3D:THREE.Mesh)
  {method} _onEvent(event: PlaygroundInteractionEvent)
}

class MapQuadRendererThreeJs {
  {method} _directionRotate(object3D:THREE.Object3D, direction:string)
}

abstract class RenderablesFactory {
  specification: RenderablesSpecification
  {method} constructor(specification: RenderablesSpecification)
  {method} spawnRenderableObject(objectName:string):Renderable;
  {method} loadTemplates(filterNames: string[]):Promise<void>;
}

class RenderablesThreeJSFactory {
  templates:Map<string, THREE.Object3D>;
  loader: any;
  {method} constructor(specification: RenderablesSpecification, loader:any)
  {method} _matchingChildren(children:any[], filterNames: string[]):any[]
  {method} _cloneMaterials(parent:THREE.Mesh)
  {method} _addTemplate(name:string, object3D:THREE.Object3D)
  {method} _findSpecificationItem(objectName: string):RenderableSpecificationItem
  {method} _loadRenderablesObjectsTemplate(path: string, filterNames: string[]): Promise<void>
  {method} _parseRenderablesObjectsTemplate(objectsStringRepresentation: string, filterNames: string[]): Promise<void>
}

abstract class MapIndicator {
  
  renderablesFactory: RenderablesFactory;
  mapProvider: MapPositionProvider&MapWritable;

  constructor(mapProvider: MapPositionProvider&MapWritable, renderablesFactory: RenderablesFactory)

  {method} forTile(tile: TileBase):void;
  {method} forTiles(tiles: TileBase[]):void;
  {method} hide():void;
  {method} show():void;

  {method} render(renderables: Renderable[], tiles: TileBase[], colorHex?: string):void;    
}

abstract class AreaMapIndicator{
  renderables: Renderable[];
  tiles: TileBase[];
  renderableKey: string;
  colorHex?: string;
  
  constructor(mapProvider: MapPositionProvider&MapWritable, renderablesFactory: RenderablesFactory, renderableKey: string, colorHex?: string)

}

class AreaMapIndicatorThreeJs{

}

interface Renderable{
  name: string,
  data: any,
  show?: ()=>void;
  hide?: ()=>void;
}

interface RenderableThreeJS{
  data: THREE.Object3D
}



interface RenderableSpecificationItem {
  name: string,
  url: string,
  json: string
  pivotCorrection: string
}

interface RenderablesSpecification {
  main: RenderableSpecificationItem  
}

interface RenderablesSpecificationMap {
  helpers: RenderableSpecificationItem
}

interface ScenePosition {
  x: number,
  y: number,
  z: number
}

interface MapPositionProvider {
  xyToScenePosition(y: number, x:number):ScenePosition,
  scenePositionToXY(sceneX:number,sceneY:number):TilePosition
}

interface MapWritable {
  add(renderable: Renderable): void;
}

PlaygroundView <.. Renderer : renders/draws Renderables on target view

Renderer <|-- MapRenderer
Renderer <|-- HudRenderer
HudRenderer <|-- HudRendererThreeJs
MapRenderer <|-- MapRendererThreeJs
MapRendererThreeJs <|-- MapQuadRendererThreeJs
Renderer .. RenderablesFactory
RenderablesFactory .. Renderable

RenderablesFactory <|.. RenderablesThreeJSFactory

MapPositionProvider <|.. MapRenderer
MapWritable <|.. MapRenderer

Renderable <|-- RenderableThreeJS

RenderablesSpecification <|-- RenderablesSpecificationMap

RenderablesSpecification .. RenderableSpecificationItem

RenderablesFactory .. RenderablesSpecification

MapIndicator <|-- AreaMapIndicator

AreaMapIndicator <|-- AreaMapIndicatorThreeJs
@enduml